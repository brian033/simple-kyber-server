'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var invariant = _interopDefault(require('tiny-invariant'));
var sdk = require('@dynamic-amm/sdk');
var ethers = require('ethers');
var axios = _interopDefault(require('axios'));
var constants = require('@ethersproject/constants');
var address = require('@ethersproject/address');
var BigNumber = _interopDefault(require('bignumber.js'));
var utils = require('ethers/lib/utils');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var _dexIds, _dexTypes, _DEX_TO_COMPARE;
var dexListConfig = {
  dmm: {
    name: 'KyberSwap',
    icon: 'https://kyberswap.com/favicon.ico',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET, sdk.ChainId.AVAXMAINNET, sdk.ChainId.FANTOM, sdk.ChainId.CRONOS, sdk.ChainId.ARBITRUM, sdk.ChainId.BTTC, sdk.ChainId.AURORA, sdk.ChainId.VELAS, sdk.ChainId.OASIS]
  },
  kyberswap: {
    name: 'KyberSwap',
    icon: 'https://kyberswap.com/favicon.ico',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET, sdk.ChainId.AVAXMAINNET, sdk.ChainId.FANTOM, sdk.ChainId.CRONOS, sdk.ChainId.ARBITRUM, sdk.ChainId.BTTC, sdk.ChainId.AURORA, sdk.ChainId.VELAS, sdk.ChainId.OASIS]
  },
  uniswap: {
    name: 'UniSwap_V2',
    icon: 'https://www.logowik.com/content/uploads/images/uniswap-uni7403.jpg',
    chainIds: [sdk.ChainId.MAINNET]
  },
  uniswapv3: {
    name: 'UniSwap_V3',
    icon: 'https://www.logowik.com/content/uploads/images/uniswap-uni7403.jpg',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.ARBITRUM, sdk.ChainId.MATIC]
  },
  sushiswap: {
    name: 'SushiSwap',
    icon: 'https://res.cloudinary.com/sushi-cdn/image/fetch/f_auto,c_limit,w_32,q_auto/https://app.sushi.com/images/logo.svg',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.MATIC, sdk.ChainId.FANTOM, sdk.ChainId.ARBITRUM, sdk.ChainId.BSCMAINNET]
  },
  shibaswap: {
    name: 'ShibaSwap',
    icon: 'https://shibaswap.com/images/logo_shiba_swap.png',
    chainIds: [sdk.ChainId.MAINNET]
  },
  defiswap: {
    name: 'DefiSwap',
    icon: 'https://crypto.com/defi/swap/favicon.c5a5b109.png',
    chainIds: [sdk.ChainId.MAINNET]
  },
  quickswap: {
    name: 'QuickSwap',
    icon: 'https://quickswap.exchange/logo_circle.png',
    chainIds: [sdk.ChainId.MATIC]
  },
  dfyn: {
    name: 'Dfyn',
    icon: 'https://dfyn.network/assets/logos/dfyn-favicon.png',
    chainIds: [sdk.ChainId.MATIC]
  },
  firebird: {
    name: 'Firebird',
    icon: 'https://app.firebird.finance/favicon.png',
    chainIds: [sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET]
  },
  oneswap: {
    name: 'OneSwap',
    icon: 'https://app.firebird.finance/favicon.png',
    chainIds: [sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET]
  },
  wault: {
    name: 'Wault',
    icon: 'https://wault.finance/wp-content/uploads/2021/04/cropped-wault-new-favicon-32x32.png',
    chainIds: [sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET]
  },
  curve: {
    name: 'Curve',
    icon: 'https://curve.fi/favicon-32x32.svg',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.MATIC, sdk.ChainId.FANTOM, sdk.ChainId.ARBITRUM]
  },
  jetswap: {
    name: 'JetSwap',
    icon: 'https://jetswap.finance/favicon_io/favicon.ico',
    chainIds: [sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET, sdk.ChainId.FANTOM]
  },
  'iron-stable': {
    name: 'IronSwap',
    icon: 'https://iron.finance/icons/icon-72x72.png',
    chainIds: [sdk.ChainId.MATIC, sdk.ChainId.AVAXMAINNET]
  },
  polydex: {
    name: 'PolyDex',
    icon: 'https://www.polydex.fi/favicon.ico',
    chainIds: [sdk.ChainId.MATIC]
  },
  polycat: {
    name: 'Polycat',
    icon: 'https://polycat.finance/favicon-32x32.png',
    chainIds: [sdk.ChainId.MATIC]
  },
  gravity: {
    name: 'Gravity',
    icon: 'https://gravityfinance.io/favicon.ico',
    chainIds: [sdk.ChainId.MATIC]
  },
  cometh: {
    name: 'ComethSwap',
    icon: 'https://swap.cometh.io/favicon.ico',
    chainIds: [sdk.ChainId.MATIC]
  },
  dinoswap: {
    name: 'DinoSwap',
    icon: 'https://dinoswap.exchange/favicon.ico',
    chainIds: [sdk.ChainId.MATIC]
  },
  pancake: {
    name: 'PancakeSwap',
    icon: 'https://pancakeswap.finance/favicon.ico',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  'pancake-legacy': {
    name: 'PancakeSwap Legacy',
    icon: 'https://pancakeswap.finance/favicon.ico',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  mdex: {
    name: 'Mdex',
    icon: 'https://cdn.jsdelivr.net/gh/mdexSwap/hswap@main/favicon.png',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  biswap: {
    name: 'Biswap',
    icon: 'https://biswap.org/logo.png',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  apeswap: {
    name: 'ApeSwap',
    icon: 'https://apeswap.finance/favicon.ico',
    chainIds: [sdk.ChainId.MATIC, sdk.ChainId.BSCMAINNET]
  },
  ellipsis: {
    name: 'Ellipsis',
    icon: 'https://ellipsis.finance/ellipsis-light.png',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  safeswap: {
    name: 'SafeSwap',
    icon: 'https://safeswap.yfdai.finance/favicon.png',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  pantherswap: {
    name: 'PantherSwap',
    icon: 'https://pantherswap.com/favicon.ico',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  nerve: {
    name: 'Nerve',
    icon: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8755.png',
    chainIds: [sdk.ChainId.BSCMAINNET]
  },
  pangolin: {
    name: 'Pangolin',
    icon: 'https://pangolin.exchange/icon.svg',
    chainIds: [sdk.ChainId.AVAXMAINNET]
  },
  traderjoe: {
    name: 'TraderJoe',
    icon: 'https://www.traderjoexyz.com/favicon.png',
    chainIds: [sdk.ChainId.AVAXMAINNET]
  },
  spookyswap: {
    name: 'SpookySwap',
    icon: 'https://spookyswap.finance/favicon.ico',
    chainIds: [sdk.ChainId.FANTOM]
  },
  spiritswap: {
    name: 'SpiritSwap',
    icon: 'https://app.spiritswap.finance/favicon-32x32.png',
    chainIds: [sdk.ChainId.FANTOM]
  },
  paintswap: {
    name: 'PaintSwap',
    icon: 'https://paintswap.finance/favicon.png',
    chainIds: [sdk.ChainId.FANTOM]
  },
  morpheus: {
    name: 'MorpheusSwap',
    icon: 'https://morpheusswap.app/favicon.ico',
    chainIds: [sdk.ChainId.FANTOM]
  },
  beethovenx: {
    name: 'beethoven-x',
    icon: 'https://app.beets.fi/favicon.ico',
    chainIds: [sdk.ChainId.FANTOM]
  },
  synapse: {
    name: 'Synapse',
    icon: 'https://synapseprotocol.com/favicon.ico',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.BSCMAINNET, sdk.ChainId.MATIC, sdk.ChainId.AVAXMAINNET, sdk.ChainId.FANTOM, sdk.ChainId.ARBITRUM]
  },
  saddle: {
    name: 'Saddle',
    icon: 'https://saddle.finance/favicon-32x32.png',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.FANTOM, sdk.ChainId.ARBITRUM]
  },
  balancer: {
    name: 'Balancer',
    icon: 'https://app.balancer.fi/favicon.ico',
    chainIds: [sdk.ChainId.MAINNET, sdk.ChainId.MATIC, sdk.ChainId.ARBITRUM]
  },
  axial: {
    name: 'Axial',
    icon: 'https://assets.website-files.com/6189dee5e79d6e8f7e214eba/618bf2f3e40e777d4210a84f_favicon.ico',
    chainIds: [sdk.ChainId.AVAXMAINNET]
  },
  lydia: {
    name: 'Lydia',
    icon: 'https://www.lydia.finance/favicon.ico',
    chainIds: [sdk.ChainId.AVAXMAINNET]
  },
  yetiswap: {
    name: 'Yeti Swap',
    icon: 'https://exchange.yetiswap.app/favicon.png',
    chainIds: [sdk.ChainId.AVAXMAINNET]
  },
  hurricane: {
    name: 'HurricaneSwap',
    icon: 'https://hurricaneswap.com/favicon.png',
    chainIds: [sdk.ChainId.AVAXMAINNET]
  },
  vvs: {
    name: 'VVS Finance',
    icon: 'https://vvs.finance/favicon.ico',
    chainIds: [sdk.ChainId.CRONOS]
  },
  cronaswap: {
    name: 'CronaSwap',
    icon: 'https://app.cronaswap.org/favicon.png',
    chainIds: [sdk.ChainId.CRONOS]
  },
  crodex: {
    name: 'Crodex',
    icon: 'https://swap.crodex.app/favicon.png',
    chainIds: [sdk.ChainId.CRONOS]
  },
  mmf: {
    name: 'Mad Meerkat Finance',
    icon: 'https://mm.finance/favicon.ico',
    chainIds: [sdk.ChainId.CRONOS]
  },
  kryptodex: {
    name: 'KryptoDEX',
    icon: 'https://www.kryptodex.org/favicon.svg',
    chainIds: [sdk.ChainId.CRONOS]
  },
  empiredex: {
    name: 'Empire Dex',
    icon: 'https://bsc.empiredex.org/favicon.png',
    chainIds: [sdk.ChainId.CRONOS]
  },
  photonswap: {
    name: 'PhotonSwap',
    icon: 'https://photonswap.finance/logo.png',
    chainIds: [sdk.ChainId.CRONOS]
  },
  trisolaris: {
    name: 'Trisolaris',
    icon: 'https://www.trisolaris.io/favicon.png',
    chainIds: [sdk.ChainId.AURORA]
  },
  wannaswap: {
    name: 'WannaSwap',
    icon: 'https://wannaswap.finance/icon.png',
    chainIds: [sdk.ChainId.AURORA]
  },
  nearpad: {
    name: 'NearPAD',
    icon: 'https://i.imgur.com/6IFKjOZ.png',
    chainIds: [sdk.ChainId.AURORA]
  },
  swapr: {
    name: 'Swapr',
    icon: 'https://swapr.eth.link/favicon.png',
    chainIds: [sdk.ChainId.ARBITRUM]
  },
  wagyuswap: {
    name: 'WagyuSwap',
    icon: 'https://exchange.wagyuswap.app/images/logo.png',
    chainIds: [sdk.ChainId.VELAS]
  },
  astroswap: {
    name: 'AstroSwap',
    icon: 'https://exchange.astroswap.app/images/logo.png',
    chainIds: [sdk.ChainId.VELAS]
  },
  yuzuswap: {
    name: 'YuzuSwap',
    icon: 'https://yuzu-swap.com/yuzu-white.2d6bbbe6.svg',
    chainIds: [sdk.ChainId.OASIS]
  },
  // duneswap: {
  //   name: 'Duneswap',
  //   icon: 'https://www.duneswap.com/_next/image?url=%2Flogo.png&w=256&q=75',
  //   chainIds: [ChainId.OASIS],
  // },
  lizard: {
    name: 'Lizard Exchange',
    icon: 'https://lizard.exchange/static/media/lizard_white.17de6ee5.svg',
    chainIds: [sdk.ChainId.OASIS]
  },
  valleyswap: {
    name: 'ValleySwap_V1',
    icon: 'https://valleyswap.com/images/logo_valley-swap_mob.svg',
    chainIds: [sdk.ChainId.OASIS]
  },
  'valleyswap-v2': {
    name: 'ValleySwap_V2',
    icon: 'https://valleyswap.com/images/logo_valley-swap_mob.svg',
    chainIds: [sdk.ChainId.OASIS]
  },
  gemkeeper: {
    name: 'GemKeeper',
    icon: 'https://gemkeeper.finance/static/media/main_logo.0ec96048.png',
    chainIds: [sdk.ChainId.OASIS]
  }
};
/*
// dex id - swap fee
1 - 30 (default) = 0.3%
2 - 25
3 - 20
4 - 15
5 - 10
6 - 5
7 - 17 = 0.17%
8 - 18 = 0.18%
9 - 50 = 0.5%
*/

var dexIds = (_dexIds = {
  all: {
    firebird: 1,
    pancake: 2,
    'pancake-legacy': 2,
    apeswap: 3,
    wault: 3,
    biswap: 5,
    polydex: 5,
    jetswap: 5,
    polycat: 2,
    spookyswap: 3,
    axial: 3,
    cronaswap: 2,
    gravity: 2,
    kyberswap: 0,
    mmf: 7,
    kryptodex: 3,
    cometh: 9,
    dinoswap: 8,
    safeswap: 2,
    pantherswap: 3,
    morpheus: 4,
    wannaswap: 3,
    swapr: 2,
    wagyuswap: 3,
    astroswap: 3
  }
}, _dexIds[sdk.ChainId.BSCMAINNET] = {
  jetswap: 1
}, _dexIds[sdk.ChainId.MATIC] = {}, _dexIds); // For encoding

var dexTypes = (_dexTypes = {
  all: {
    curve: 2,
    dmm: 3,
    kyberswap: 3,
    oneswap: 1,
    ellipsis: 2,
    nerve: 1,
    'iron-stable': 4,
    balancer: 6,
    synapse: 4,
    saddle: 4,
    axial: 4,
    beethovenx: 6,
    uniswapv3: 5
  }
}, _dexTypes[sdk.ChainId.MAINNET] = {}, _dexTypes[sdk.ChainId.BSCMAINNET] = {}, _dexTypes[sdk.ChainId.MATIC] = {}, _dexTypes[sdk.ChainId.AVAXMAINNET] = {}, _dexTypes[sdk.ChainId.FANTOM] = {}, _dexTypes[sdk.ChainId.VELAS] = {}, _dexTypes[sdk.ChainId.OASIS] = {}, _dexTypes);

function findDex(exchange) {
  var dex = dexListConfig[exchange];
  return dex ? _extends({}, dex, {
    value: exchange
  }) : undefined;
}

var DEX_TO_COMPARE = (_DEX_TO_COMPARE = {}, _DEX_TO_COMPARE[sdk.ChainId.BSCMAINNET] = /*#__PURE__*/findDex('pancake'), _DEX_TO_COMPARE[sdk.ChainId.MATIC] = /*#__PURE__*/findDex('quickswap'), _DEX_TO_COMPARE[sdk.ChainId.AVAXMAINNET] = /*#__PURE__*/findDex('traderjoe'), _DEX_TO_COMPARE[sdk.ChainId.MAINNET] = /*#__PURE__*/findDex('uniswapv2'), _DEX_TO_COMPARE[sdk.ChainId.FANTOM] = /*#__PURE__*/findDex('spookyswap'), _DEX_TO_COMPARE[sdk.ChainId.CRONOS] = /*#__PURE__*/findDex('vvs'), _DEX_TO_COMPARE[sdk.ChainId.AURORA] = /*#__PURE__*/findDex('trisolaris'), _DEX_TO_COMPARE[sdk.ChainId.ARBITRUM] = /*#__PURE__*/findDex('sushiswap'), _DEX_TO_COMPARE[sdk.ChainId.VELAS] = /*#__PURE__*/findDex('wagyuswap'), _DEX_TO_COMPARE[sdk.ChainId.OASIS] = /*#__PURE__*/findDex('valleyswap-v2'), _DEX_TO_COMPARE);

function dec2bin(dec, length) {
  // let bin = (dec >>> 0).toString(2)
  var bin = dec.toString(2); // const maxBinLength = maxDec ? (maxDec >>> 0).toString(2).length : null

  var maxBinLength = length || null;

  if (maxBinLength && maxBinLength > bin.length) {
    var zeros = new Array(maxBinLength - bin.length + 1).join('0');
    bin = zeros + bin;
  }

  return bin;
}

function bin2dec(binaryNumber) {
  return parseInt((binaryNumber + '').replace(/[^01]/gi, ''), 2);
}

var getExchangeConfig = function getExchangeConfig(exchange, chainId) {
  var _getKeyValue, _getKeyValue2;

  if (!exchange) {
    return {};
  }

  var getKeyValue = function getKeyValue(obj) {
    return function (key) {
      return obj[key];
    };
  };

  var ids = chainId && dexIds[chainId] || {};
  var types = chainId && dexTypes[chainId] || {};
  var allIds = Object.assign({}, dexIds.all || {}, ids);
  var allTypes = Object.assign({}, dexTypes.all || {}, types);
  return _extends({}, getKeyValue(dexListConfig)(exchange) || {}, {
    id: (_getKeyValue = getKeyValue(allIds)(exchange)) != null ? _getKeyValue : 1,
    type: (_getKeyValue2 = getKeyValue(allTypes)(exchange)) != null ? _getKeyValue2 : 0
  });
};

function encodeParameters(types, values) {
  var abi = new ethers.ethers.utils.AbiCoder();
  return abi.encode(types, values);
}

function encodeUniSwapV3(data) {
  return encodeParameters(['address', 'address', 'address', 'uint256', 'uint256', 'uint160'], [data.pool, data.tokenIn, data.tokenOut, data.swapAmount, data.limitReturnAmount || '0', '0']);
}

function encodeUniSwap(data) {
  return encodeParameters(['address', 'address', 'address', 'address', 'uint256', 'uint256'], [data.pool, data.tokenIn, data.tokenOut, data.recipient, data.collectAmount, data.limitReturnAmount || '0']);
}

function encodeStableSwap(data) {
  var _data$extra, _data$extra2;

  return encodeParameters(['address', 'address', 'address', 'int128', 'int128', 'uint256', 'uint256', 'uint256', 'address'], [data.pool, data.tokenIn, data.tokenOut, (_data$extra = data.extra) == null ? void 0 : _data$extra.tokenInIndex, (_data$extra2 = data.extra) == null ? void 0 : _data$extra2.tokenOutIndex, data.swapAmount, data.limitReturnAmount || '0', data.poolLength, data.pool]);
}

function encodeCurveSwap(data) {
  var _data$poolType, _data$extra3, _data$extra4, _data$extra5;

  var poolType = (_data$poolType = data.poolType) == null ? void 0 : _data$poolType.toLowerCase(); // curve-base: exchange
  // curve-meta: exchange_underlying

  var usePoolUnderlying = (_data$extra3 = data.extra) == null ? void 0 : _data$extra3.underlying;
  var isTriCrypto = poolType === 'curve-tricrypto';
  return encodeParameters(['address', 'address', 'address', 'int128', 'int128', 'uint256', 'uint256', 'bool', 'bool'], [data.pool, data.tokenIn, data.tokenOut, (_data$extra4 = data.extra) == null ? void 0 : _data$extra4.tokenInIndex, (_data$extra5 = data.extra) == null ? void 0 : _data$extra5.tokenOutIndex, data.swapAmount, '0', usePoolUnderlying, isTriCrypto]);
}

function encodeBalancerSwap(data) {
  var _data$extra6;

  return encodeParameters(['address', 'bytes32', 'address', 'address', 'uint256', 'uint256'], [(_data$extra6 = data.extra) == null ? void 0 : _data$extra6.vault, data.pool, data.tokenIn, data.tokenOut, data.swapAmount, data.limitReturnAmount || '0']);
}

function isEncodeUniswapCallback(chainId) {
  return function (swap) {
    var dex = getExchangeConfig(swap.exchange, chainId);

    if ([1, 4, 2, 6, 5].includes(dex.type)) {
      return false;
    }

    return true;
  };
}
function encodeSwapExecutor(swaps, chainId) {
  return swaps.map(function (swap) {
    return swap.map(function (sequence) {
      // (0 uni, 1 one swap, 2 curve)
      var dex = getExchangeConfig(sequence.exchange, chainId); // dexOption: 16 bit (first 8 bit for dextype + last 8 bit is dexIds in uni swap type)

      var dexOption = dec2bin(dex.type, 8) + dec2bin(dex.id, 8);
      var data;

      if (dex.type === 1 || dex.type === 4) {
        data = encodeStableSwap(sequence);
      } else if (dex.type === 2) {
        data = encodeCurveSwap(sequence);
      } else if (dex.type === 6) {
        data = encodeBalancerSwap(sequence);
      } else if (dex.type === 5) {
        data = encodeUniSwapV3(sequence);
      } else {
        data = encodeUniSwap(sequence);
      }

      return {
        data: data,
        dexOption: bin2dec(dexOption)
      };
    });
  });
}
function encodeFeeConfig(_ref) {
  var feeReceiver = _ref.feeReceiver,
      isInBps = _ref.isInBps,
      feeAmount = _ref.feeAmount;
  return encodeParameters(['address', 'bool', 'uint256'], [feeReceiver, isInBps, feeAmount]);
}
function encodeSimpleModeData(data) {
  var bytesDes = encodeParameters(['address[]', 'uint256[]', 'bytes[]', 'uint256', 'bytes'], [data.firstPools, data.firstSwapAmounts, data.swapSequences.map(function (item) {
    var data = item.map(function (inner) {
      return [inner.data, inner.dexOption];
    });
    return encodeParameters(['(bytes,uint16)[]'], [data]);
  }), data.deadline, data.destTokenFeeData]);
  return '0x0000000000000000000000000000000000000000000000000000000000000020'.concat(bytesDes.toString().slice(2));
}
/**
 * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.
 * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns
 * the input currency amount.
 */

function wrappedAmount2(currencyAmount, chainId) {
  if (currencyAmount instanceof sdk.TokenAmount) return currencyAmount;
  if (currencyAmount.currency === sdk.ETHER) return new sdk.TokenAmount(sdk.WETH[chainId], currencyAmount.raw);
    invariant(false, 'CURRENCY')  ;
}

function wrappedCurrency2(currency, chainId) {
  if (currency instanceof sdk.Token) return currency;
  if (currency === sdk.ETHER) return sdk.WETH[chainId];
    invariant(false, 'CURRENCY')  ;
}
/**
 */


var Aggregator = /*#__PURE__*/function () {
  function Aggregator(inputAmount, outputAmount, amountInUsd, amountOutUsd, receivedUsd, swaps, tokens, tradeType, gasUsd, priceImpact) {
    this.tradeType = tradeType;
    this.inputAmount = inputAmount;
    this.outputAmount = outputAmount;
    this.amountInUsd = amountInUsd;
    this.amountOutUsd = amountOutUsd;
    this.receivedUsd = receivedUsd;
    this.executionPrice = new sdk.Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);
    this.swaps = swaps;
    this.tokens = tokens;
    this.gasUsd = gasUsd;
    this.priceImpact = priceImpact;
  }
  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */


  var _proto = Aggregator.prototype;

  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {
    !!slippageTolerance.lessThan(sdk.ZERO) ?  invariant(false, 'SLIPPAGE_TOLERANCE')  : void 0;

    if (this.tradeType === sdk.TradeType.EXACT_OUTPUT) {
      return this.outputAmount;
    } else {
      var slippageAdjustedAmountOut = new sdk.Fraction(sdk.ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;
      return this.outputAmount instanceof sdk.TokenAmount ? new sdk.TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : sdk.CurrencyAmount.ether(slippageAdjustedAmountOut);
    }
  }
  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  ;

  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {
    !!slippageTolerance.lessThan(sdk.ZERO) ?  invariant(false, 'SLIPPAGE_TOLERANCE')  : void 0;

    if (this.tradeType === sdk.TradeType.EXACT_INPUT) {
      return this.inputAmount;
    } else {
      var slippageAdjustedAmountIn = new sdk.Fraction(sdk.ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;
      return this.inputAmount instanceof sdk.TokenAmount ? new sdk.TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : sdk.CurrencyAmount.ether(slippageAdjustedAmountIn);
    }
  }
  /**
   * @param baseURL
   * @param currencyAmountIn exact amount of input currency to spend
   * @param currencyOut the desired currency out
   * @param saveGas
   */
  ;

  Aggregator.bestTradeExactIn =
  /*#__PURE__*/
  function () {
    var _bestTradeExactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(baseURL, currencyAmountIn, currencyOut, saveGas, dexes, gasPrice) {
      var _amountIn$token;

      var chainId, amountIn, tokenOut, tokenInAddress, tokenOutAddress, _currencyAmountIn$raw, search, response, result, toCurrencyAmount, inputAmount, outputAmount, priceImpact;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (saveGas === void 0) {
                saveGas = false;
              }

              if (dexes === void 0) {
                dexes = '';
              }

              chainId = currencyAmountIn instanceof sdk.TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof sdk.Token ? currencyOut.chainId : undefined;
              !(chainId !== undefined) ?  invariant(false, 'CHAIN_ID')  : void 0;
              amountIn = wrappedAmount2(currencyAmountIn, chainId);
              tokenOut = wrappedCurrency2(currencyOut, chainId);
              tokenInAddress = (_amountIn$token = amountIn.token) == null ? void 0 : _amountIn$token.address;
              tokenOutAddress = tokenOut.address;

              if (!(tokenInAddress && tokenOutAddress)) {
                _context.next = 29;
                break;
              }

              search = new URLSearchParams(_extends({
                tokenIn: tokenInAddress.toLowerCase(),
                tokenOut: tokenOutAddress.toLowerCase(),
                amountIn: (_currencyAmountIn$raw = currencyAmountIn.raw) == null ? void 0 : _currencyAmountIn$raw.toString(),
                saveGas: saveGas ? '1' : '0',
                gasInclude: saveGas ? '1' : '0'
              }, gasPrice ? {
                gasPrice: ethers.BigNumber.from(gasPrice.standard).mul(Math.pow(10, 9)).toString()
              } : {}, dexes ? {
                dexes: dexes
              } : {}));
              _context.prev = 10;
              _context.next = 13;
              return axios(baseURL + "?" + search);

            case 13:
              response = _context.sent;
              _context.next = 16;
              return response.data;

            case 16:
              result = _context.sent;

              if (!(!(result != null && result.inputAmount) || !(result != null && result.outputAmount) || result.inputAmount === '0' || result.outputAmount === '0')) {
                _context.next = 19;
                break;
              }

              return _context.abrupt("return", null);

            case 19:
              toCurrencyAmount = function toCurrencyAmount(value, currency) {
                return currency instanceof sdk.Token ? new sdk.TokenAmount(currency, sdk.JSBI.BigInt(value)) : sdk.CurrencyAmount.ether(sdk.JSBI.BigInt(value));
              };

              inputAmount = toCurrencyAmount(result.inputAmount, currencyAmountIn.currency);
              outputAmount = toCurrencyAmount(result.outputAmount, currencyOut);
              priceImpact = (-result.amountOutUsd + result.amountInUsd) * 100 / result.amountInUsd;
              return _context.abrupt("return", new Aggregator(inputAmount, outputAmount, result.amountInUsd, result.amountOutUsd, result.receivedUsd, result.swaps || [], result.tokens || {}, sdk.TradeType.EXACT_INPUT, result.gasUsd, priceImpact));

            case 26:
              _context.prev = 26;
              _context.t0 = _context["catch"](10);
              console.error(_context.t0);

            case 29:
              return _context.abrupt("return", null);

            case 30:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[10, 26]]);
    }));

    function bestTradeExactIn(_x, _x2, _x3, _x4, _x5, _x6) {
      return _bestTradeExactIn.apply(this, arguments);
    }

    return bestTradeExactIn;
  }()
  /**
   * @param baseURL
   * @param currencyAmountIn exact amount of input currency to spend
   * @param currencyOut the desired currency out
   */
  ;

  Aggregator.compareDex =
  /*#__PURE__*/
  function () {
    var _compareDex = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(baseURL, currencyAmountIn, currencyOut) {
      var _amountIn$token2, _amountIn$token2$addr, _tokenOut$address;

      var chainId, amountIn, tokenOut, tokenInAddress, tokenOutAddress, comparedDex, _currencyAmountIn$raw2, search, response, swapData, toCurrencyAmount, inputAmount, outputAmount, amountInUsd, amountOutUsd, receivedUsd;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              chainId = currencyAmountIn instanceof sdk.TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof sdk.Token ? currencyOut.chainId : undefined;
              !(chainId !== undefined) ?  invariant(false, 'CHAIN_ID')  : void 0;
              amountIn = wrappedAmount2(currencyAmountIn, chainId);
              tokenOut = wrappedCurrency2(currencyOut, chainId);
              tokenInAddress = (_amountIn$token2 = amountIn.token) == null ? void 0 : (_amountIn$token2$addr = _amountIn$token2.address) == null ? void 0 : _amountIn$token2$addr.toLowerCase();
              tokenOutAddress = (_tokenOut$address = tokenOut.address) == null ? void 0 : _tokenOut$address.toLowerCase();
              comparedDex = DEX_TO_COMPARE[chainId]; // const basePriceURL = priceUri[chainId]

              if (!(tokenInAddress && tokenOutAddress && comparedDex != null && comparedDex.value //  && basePriceURL
              )) {
                _context2.next = 30;
                break;
              }

              search = new URLSearchParams({
                tokenIn: tokenInAddress,
                tokenOut: tokenOutAddress,
                amountIn: (_currencyAmountIn$raw2 = currencyAmountIn.raw) == null ? void 0 : _currencyAmountIn$raw2.toString(),
                saveGas: '0',
                gasInclude: '1',
                dexes: comparedDex.value
              });
              _context2.prev = 9;
              _context2.next = 12;
              return axios(baseURL + "?" + search);

            case 12:
              response = _context2.sent;
              _context2.next = 15;
              return response.data;

            case 15:
              swapData = _context2.sent;

              if (!(!(swapData != null && swapData.inputAmount) || !(swapData != null && swapData.outputAmount))) {
                _context2.next = 18;
                break;
              }

              return _context2.abrupt("return", null);

            case 18:
              toCurrencyAmount = function toCurrencyAmount(value, currency) {
                return currency instanceof sdk.Token ? new sdk.TokenAmount(currency, sdk.JSBI.BigInt(value)) : sdk.CurrencyAmount.ether(sdk.JSBI.BigInt(value));
              };

              inputAmount = toCurrencyAmount(swapData.inputAmount, currencyAmountIn.currency);
              outputAmount = toCurrencyAmount(swapData.outputAmount, currencyOut);
              amountInUsd = swapData.amountInUsd;
              amountOutUsd = swapData.amountOutUsd;
              receivedUsd = swapData.receivedUsd; // const outputPriceUSD = priceData.data[tokenOutAddress] || Object.values(priceData.data[0]) || '0'

              return _context2.abrupt("return", {
                inputAmount: inputAmount,
                outputAmount: outputAmount,
                amountInUsd: amountInUsd,
                amountOutUsd: amountOutUsd,
                receivedUsd: receivedUsd,
                // outputPriceUSD: parseFloat(outputPriceUSD),
                comparedDex: comparedDex
              });

            case 27:
              _context2.prev = 27;
              _context2.t0 = _context2["catch"](9);
              console.error(_context2.t0);

            case 30:
              return _context2.abrupt("return", null);

            case 31:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[9, 27]]);
    }));

    function compareDex(_x7, _x8, _x9) {
      return _compareDex.apply(this, arguments);
    }

    return compareDex;
  }();

  return Aggregator;
}();

var _NETWORK_URLS, _providers, _routerUri, _AGGREGATION_EXECUTOR;
var REACT_APP_INFURA_KEY = "9aa3d95b3bc440fa88ea12eaa4456161";
var REACT_APP_AGGREGATOR_API = "https://aggregator-api.kyberswap.com";
var NETWORK_URLS = (_NETWORK_URLS = {}, _NETWORK_URLS[sdk.ChainId.MAINNET] = 'https://ethereum.kyber.network/v1/mainnet/geth?appId=prod-dmm-interface', _NETWORK_URLS[sdk.ChainId.RINKEBY] = "https://rinkeby.infura.io/v3/" + REACT_APP_INFURA_KEY, _NETWORK_URLS[sdk.ChainId.ROPSTEN] = 'https://ropsten.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161', _NETWORK_URLS[sdk.ChainId.GÖRLI] = "https://goerli.infura.io/v3/" + REACT_APP_INFURA_KEY, _NETWORK_URLS[sdk.ChainId.KOVAN] = "https://kovan.infura.io/v3/" + REACT_APP_INFURA_KEY, _NETWORK_URLS[sdk.ChainId.MUMBAI] = "https://rpc-mumbai.maticvigil.com", _NETWORK_URLS[sdk.ChainId.MATIC] = "https://polygon.dmm.exchange/v1/mainnet/geth?appId=prod-dmm", _NETWORK_URLS[sdk.ChainId.BSCTESTNET] = "https://data-seed-prebsc-1-s1.binance.org:8545", _NETWORK_URLS[sdk.ChainId.BSCMAINNET] = "https://bsc.dmm.exchange/v1/mainnet/geth?appId=prod-dmm-interface", _NETWORK_URLS[sdk.ChainId.AVAXTESTNET] = "https://api.avax-test.network/ext/bc/C/rpc", _NETWORK_URLS[sdk.ChainId.AVAXMAINNET] = "https://avalanche.dmm.exchange/v1/mainnet/geth?appId=prod-dmm", _NETWORK_URLS[sdk.ChainId.FANTOM] = "https://rpc.ftm.tools", _NETWORK_URLS[sdk.ChainId.CRONOSTESTNET] = "https://cronos-testnet-3.crypto.org:8545", _NETWORK_URLS[sdk.ChainId.CRONOS] = "https://evm-cronos.crypto.org", _NETWORK_URLS[sdk.ChainId.BTTC] = "https://bttc.dev.kyberengineering.io", _NETWORK_URLS[sdk.ChainId.ARBITRUM] = "https://arb1.arbitrum.io/rpc", _NETWORK_URLS[sdk.ChainId.ARBITRUM_TESTNET] = "https://rinkeby.arbitrum.io/rpc", _NETWORK_URLS[sdk.ChainId.VELAS] = 'https://evmexplorer.velas.com/rpc', _NETWORK_URLS[sdk.ChainId.AURORA] = "https://mainnet.aurora.dev/GvfzNcGULXzWqaVahC8WPTdqEuSmwNCu3Nu3rtcVv9MD", _NETWORK_URLS[sdk.ChainId.OASIS] = "https://emerald.oasis.dev", _NETWORK_URLS);
var providers = (_providers = {}, _providers[sdk.ChainId.MAINNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.MAINNET]), _providers[sdk.ChainId.BSCMAINNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.BSCMAINNET]), _providers[sdk.ChainId.AVAXMAINNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.AVAXMAINNET]), _providers[sdk.ChainId.MATIC] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.MATIC]), _providers[sdk.ChainId.FANTOM] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.FANTOM]), _providers[sdk.ChainId.CRONOS] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.CRONOS]), _providers[sdk.ChainId.AURORA] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.AURORA]), _providers[sdk.ChainId.ROPSTEN] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.ROPSTEN]), _providers[sdk.ChainId.MUMBAI] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.MUMBAI]), _providers[sdk.ChainId.AVAXTESTNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.AVAXTESTNET]), _providers[sdk.ChainId.BSCTESTNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.BSCTESTNET]), _providers[sdk.ChainId.CRONOSTESTNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.CRONOSTESTNET]), _providers[sdk.ChainId.ARBITRUM_TESTNET] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.ARBITRUM_TESTNET]), _providers[sdk.ChainId.ARBITRUM] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.ARBITRUM]), _providers[sdk.ChainId.BTTC] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.BTTC]), _providers[sdk.ChainId.VELAS] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.VELAS]), _providers[sdk.ChainId.OASIS] = /*#__PURE__*/new ethers.ethers.providers.JsonRpcProvider(NETWORK_URLS[sdk.ChainId.OASIS]), _providers); //https://router.firebird.finance/bsc/route

var routerUri = (_routerUri = {}, _routerUri[sdk.ChainId.MAINNET] = REACT_APP_AGGREGATOR_API + "/ethereum/route", _routerUri[sdk.ChainId.BSCMAINNET] = REACT_APP_AGGREGATOR_API + "/bsc/route", _routerUri[sdk.ChainId.MATIC] = REACT_APP_AGGREGATOR_API + "/polygon/route", _routerUri[sdk.ChainId.AVAXMAINNET] = REACT_APP_AGGREGATOR_API + "/avalanche/route", _routerUri[sdk.ChainId.FANTOM] = REACT_APP_AGGREGATOR_API + "/fantom/route", _routerUri[sdk.ChainId.CRONOS] = REACT_APP_AGGREGATOR_API + "/cronos/route", _routerUri[sdk.ChainId.ARBITRUM] = REACT_APP_AGGREGATOR_API + "/arbitrum/route", _routerUri[sdk.ChainId.BTTC] = REACT_APP_AGGREGATOR_API + "/bttc/route", _routerUri[sdk.ChainId.AURORA] = REACT_APP_AGGREGATOR_API + "/aurora/route", _routerUri[sdk.ChainId.VELAS] = REACT_APP_AGGREGATOR_API + "/velas/route", _routerUri[sdk.ChainId.OASIS] = REACT_APP_AGGREGATOR_API + "/oasis/route", _routerUri);
var AGGREGATION_EXECUTOR = (_AGGREGATION_EXECUTOR = {}, _AGGREGATION_EXECUTOR[sdk.ChainId.BSCMAINNET] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.MATIC] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.AVAXMAINNET] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.MAINNET] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.FANTOM] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.CRONOS] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.BTTC] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.ARBITRUM] = '0xd12bcdfb9a39be79da3bdf02557efdcd5ca59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.AURORA] = '0xd12bcdFB9A39BE79DA3bDF02557EFdcD5CA59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.VELAS] = '0xd12bcdFB9A39BE79DA3bDF02557EFdcD5CA59e77', _AGGREGATION_EXECUTOR[sdk.ChainId.OASIS] = '0xd12bcdFB9A39BE79DA3bDF02557EFdcD5CA59e77', _AGGREGATION_EXECUTOR);
var ETHER_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';
var ZERO_HEX = '0x0';

var AGGREGATOR_EXECUTOR_ABI = [
	{
		inputs: [
			{
				components: [
					{
						components: [
							{
								internalType: "bytes",
								name: "data",
								type: "bytes"
							},
							{
								internalType: "uint16",
								name: "dexOption",
								type: "uint16"
							}
						],
						internalType: "struct IMultihopRouter.Swap[][]",
						name: "swapSequences",
						type: "tuple[][]"
					},
					{
						internalType: "address",
						name: "tokenIn",
						type: "address"
					},
					{
						internalType: "address",
						name: "tokenOut",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "minTotalAmountOut",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "to",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "deadline",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "destTokenFeeData",
						type: "bytes"
					}
				],
				internalType: "struct AggregationExecutor.SwapExecutorDescription",
				name: "swapExecutorDescription",
				type: "tuple"
			}
		],
		name: "nameDoesntMatter",
		outputs: [
			{
				internalType: "bytes",
				name: "",
				type: "bytes"
			}
		],
		stateMutability: "pure",
		type: "function"
	}
];

function isAddress(value) {
  try {
    return address.getAddress(value);
  } catch (_unused) {
    return false;
  }
}
function toSwapAddress(currencyAmount) {
  if (currencyAmount.currency === sdk.ETHER) {
    return ETHER_ADDRESS;
  }

  return currencyAmount instanceof sdk.TokenAmount ? currencyAmount.token.address : '';
}
function getAggregationExecutorAddress(chainId) {
  return AGGREGATION_EXECUTOR[chainId] || '';
}
function getContract(address$1, ABI, library) {
  if (!isAddress(address$1) || address$1 === constants.AddressZero) {
    throw Error("Invalid 'address' parameter '" + address$1 + "'.");
  }

  return new ethers.Contract(address.getAddress(address$1), ABI, library);
}
function getAggregationExecutorContract(chainId, library) {
  return getContract(getAggregationExecutorAddress(chainId), AGGREGATOR_EXECUTOR_ABI, library);
}
function numberToHex(num) {
  return "0x" + num.toString(16);
}

/**
 * Returns the best trade for the exact amount of tokens in to the given token out
 */

function getTradeExactInV2(_x, _x2, _x3, _x4) {
  return _getTradeExactInV.apply(this, arguments);
}

function _getTradeExactInV() {
  _getTradeExactInV = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(currencyAmountIn, currencyOut, saveGas, chainId) {
    var routerApi, gasPrice, trade;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // const parsedQs: { dexes?: string } = useParsedQueryString()
            routerApi = routerUri[chainId != null ? chainId : sdk.ChainId.MAINNET];

            if (routerApi) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", null);

          case 3:
            gasPrice = undefined;

            if (!(currencyAmountIn && currencyOut)) {
              _context.next = 11;
              break;
            }

            _context.next = 7;
            return Aggregator.bestTradeExactIn(routerApi, currencyAmountIn, currencyOut, saveGas, undefined, // parsedQs.dexes,
            gasPrice);

          case 7:
            trade = _context.sent;
            return _context.abrupt("return", trade);

          case 11:
            return _context.abrupt("return", null);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getTradeExactInV.apply(this, arguments);
}

function getSwapParameters(_x5) {
  return _getSwapParameters.apply(this, arguments);
}

function _getSwapParameters() {
  _getSwapParameters = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref) {
    var chainId, currencyInAddress, currencyInDecimals, amountIn, currencyOutAddress, currencyOutDecimals, tradeConfig, feeConfig, customTradeRoute, result;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            chainId = _ref.chainId, currencyInAddress = _ref.currencyInAddress, currencyInDecimals = _ref.currencyInDecimals, amountIn = _ref.amountIn, currencyOutAddress = _ref.currencyOutAddress, currencyOutDecimals = _ref.currencyOutDecimals, tradeConfig = _ref.tradeConfig, feeConfig = _ref.feeConfig, customTradeRoute = _ref.customTradeRoute;
            _context2.next = 3;
            return getData({
              chainId: chainId,
              currencyInAddress: currencyInAddress,
              currencyInDecimals: currencyInDecimals,
              amountIn: amountIn,
              currencyOutAddress: currencyOutAddress,
              currencyOutDecimals: currencyOutDecimals,
              tradeConfig: tradeConfig,
              feeConfig: feeConfig,
              customTradeRoute: customTradeRoute
            });

          case 3:
            result = _context2.sent;
            return _context2.abrupt("return", result.swapV2Parameters);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSwapParameters.apply(this, arguments);
}

function parseInput(_ref2) {
  var chainId = _ref2.chainId,
      currencyInAddress = _ref2.currencyInAddress,
      currencyInDecimals = _ref2.currencyInDecimals,
      amountIn = _ref2.amountIn,
      currencyOutAddress = _ref2.currencyOutAddress,
      currencyOutDecimals = _ref2.currencyOutDecimals;
  var currencyAmountIn = currencyInAddress === ETHER_ADDRESS ? sdk.CurrencyAmount.ether(amountIn) : new sdk.TokenAmount(new sdk.Token(chainId, utils.getAddress(currencyInAddress), currencyInDecimals), amountIn);
  var currencyOut = currencyOutAddress === ETHER_ADDRESS ? sdk.Currency.ETHER : new sdk.Token(chainId, utils.getAddress(currencyOutAddress), currencyOutDecimals);
  return {
    chainId: chainId,
    currencyAmountIn: currencyAmountIn,
    currencyOut: currencyOut
  };
}

function getData(_x6) {
  return _getData.apply(this, arguments);
}

function _getData() {
  _getData = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_ref3) {
    var _chainId, currencyInAddress, currencyInDecimals, _amountIn, currencyOutAddress, currencyOutDecimals, tradeConfig, feeConfig, customTradeRoute, _parseInput, currencyAmountIn, currencyOut, chainId, trade, tradeRoute, etherIn, etherOut, to, tokenIn, tokenOut, amountIn, amountInWithFeeIn, amountOut, deadline, destTokenFeeData, methodNames, args, value, rawExecutorData, isUseSwapSimpleMode, aggregationExecutorAddress, aggregationExecutorContract, src, isEncodeUniswap, feeReceiver, i, sequence, firstPool, getSwapSimpleModeArgs, getSwapNormalModeArgs;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _chainId = _ref3.chainId, currencyInAddress = _ref3.currencyInAddress, currencyInDecimals = _ref3.currencyInDecimals, _amountIn = _ref3.amountIn, currencyOutAddress = _ref3.currencyOutAddress, currencyOutDecimals = _ref3.currencyOutDecimals, tradeConfig = _ref3.tradeConfig, feeConfig = _ref3.feeConfig, customTradeRoute = _ref3.customTradeRoute;
            _parseInput = parseInput({
              chainId: _chainId,
              currencyInAddress: currencyInAddress,
              currencyInDecimals: currencyInDecimals,
              amountIn: _amountIn,
              currencyOutAddress: currencyOutAddress,
              currencyOutDecimals: currencyOutDecimals,
              tradeConfig: tradeConfig,
              feeConfig: feeConfig
            }), currencyAmountIn = _parseInput.currencyAmountIn, currencyOut = _parseInput.currencyOut, chainId = _parseInput.chainId;
            _context3.next = 4;
            return getTradeExactInV2(currencyAmountIn, currencyOut, false, chainId);

          case 4:
            trade = _context3.sent;

            if (trade) {
              _context3.next = 7;
              break;
            }

            return _context3.abrupt("return", {
              swapV2Parameters: undefined,
              rawExecutorData: undefined,
              isUseSwapSimpleMode: undefined,
              tradeRoute: undefined
            });

          case 7:
            tradeRoute = customTradeRoute ? JSON.parse(customTradeRoute) : trade.swaps;
            etherIn = trade.inputAmount.currency === sdk.ETHER;
            etherOut = trade.outputAmount.currency === sdk.ETHER; // the router does not support both ether in and out

            !!(etherIn && etherOut) ?  invariant(false, 'ETHER_IN_OUT')  : void 0;
            to = sdk.validateAndParseAddress(tradeConfig.recipient);
            tokenIn = toSwapAddress(trade.inputAmount);
            tokenOut = toSwapAddress(trade.outputAmount);
            amountIn = '0x' + new BigNumber(_amountIn).toString(16);
            amountInWithFeeIn = feeConfig && feeConfig.chargeFeeBy === 'currency_in' ? feeConfig.isInBps ? '0x' + new BigNumber(_amountIn).div(new BigNumber(1).minus(new BigNumber(feeConfig.feeAmount).div(10000))).toString(16) : '0x' + new BigNumber(amountIn).plus(feeConfig.feeAmount).toString(16) : amountIn;
            amountOut = '0x' + new BigNumber(tradeConfig.minAmountOut).toString(16);
            deadline = '0x' + tradeConfig.deadline.toString(16);
            destTokenFeeData = feeConfig && feeConfig.chargeFeeBy === 'currency_out' ? encodeFeeConfig({
              feeReceiver: feeConfig.feeReceiver,
              isInBps: feeConfig.isInBps,
              feeAmount: feeConfig.feeAmount
            }) : '0x';
            methodNames = [];
            args = [];
            value = ZERO_HEX;
            rawExecutorData = undefined;
            _context3.t0 = trade.tradeType;
            _context3.next = _context3.t0 === sdk.TradeType.EXACT_INPUT ? 26 : 53;
            break;

          case 26:
            methodNames = ['swap'];

            if (!(!tokenIn || !tokenOut || !amountIn || !amountOut)) {
              _context3.next = 29;
              break;
            }

            return _context3.abrupt("break", 53);

          case 29:
            aggregationExecutorAddress = getAggregationExecutorAddress(chainId != null ? chainId : sdk.ChainId.MAINNET);

            if (aggregationExecutorAddress) {
              _context3.next = 32;
              break;
            }

            return _context3.abrupt("break", 53);

          case 32:
            aggregationExecutorContract = getAggregationExecutorContract(chainId != null ? chainId : sdk.ChainId.MAINNET, providers[chainId != null ? chainId : sdk.ChainId.MAINNET]);
            src = {};
            isEncodeUniswap = isEncodeUniswapCallback(chainId != null ? chainId : sdk.ChainId.MAINNET);

            if (feeConfig && feeConfig.chargeFeeBy === 'currency_in') {
              feeReceiver = feeConfig.feeReceiver;
              src[feeReceiver] = new BigNumber(amountInWithFeeIn).minus(amountIn);
            } // Use swap simple mode when tokenIn is not ETH and every firstPool is encoded by uniswap.


            isUseSwapSimpleMode = !etherIn;

            if (!isUseSwapSimpleMode) {
              _context3.next = 48;
              break;
            }

            i = 0;

          case 39:
            if (!(i < tradeRoute.length)) {
              _context3.next = 48;
              break;
            }

            sequence = tradeRoute[i];
            firstPool = sequence[0];

            if (isEncodeUniswap(firstPool)) {
              _context3.next = 45;
              break;
            }

            isUseSwapSimpleMode = false;
            return _context3.abrupt("break", 48);

          case 45:
            i++;
            _context3.next = 39;
            break;

          case 48:
            getSwapSimpleModeArgs = function getSwapSimpleModeArgs() {
              var firstPools = [];
              var firstSwapAmounts = [];
              tradeRoute.forEach(function (sequence) {
                for (var _i = 0; _i < sequence.length; _i++) {
                  if (_i === 0) {
                    var _firstPool = sequence[0];
                    firstPools.push(_firstPool.pool);
                    firstSwapAmounts.push(_firstPool.swapAmount);

                    if (isEncodeUniswap(_firstPool)) {
                      _firstPool.collectAmount = '0';
                    }

                    if (sequence.length === 1 && isEncodeUniswap(_firstPool)) {
                      _firstPool.recipient = etherOut || (feeConfig == null ? void 0 : feeConfig.chargeFeeBy) === 'currency_out' ? aggregationExecutorAddress : to;
                    }
                  } else {
                    var A = sequence[_i - 1];
                    var B = sequence[_i];

                    if (isEncodeUniswap(A) && isEncodeUniswap(B)) {
                      A.recipient = B.pool;
                      B.collectAmount = '0';
                    } else if (isEncodeUniswap(B)) {
                      B.collectAmount = '1';
                    } else if (isEncodeUniswap(A)) {
                      A.recipient = aggregationExecutorAddress;
                    }

                    if (_i === sequence.length - 1 && isEncodeUniswap(B)) {
                      B.recipient = etherOut || (feeConfig == null ? void 0 : feeConfig.chargeFeeBy) === 'currency_out' ? aggregationExecutorAddress : to;
                    }
                  }
                }
              });
              var swapSequences = encodeSwapExecutor(tradeRoute, chainId != null ? chainId : sdk.ChainId.MAINNET);
              var sumSrcAmounts = Object.values(src).reduce(function (sum, value) {
                return sum.plus(value);
              }, new BigNumber('0'));
              var sumFirstSwapAmounts = firstSwapAmounts.reduce(function (sum, value) {
                return sum.plus(value);
              }, new BigNumber('0'));
              var amount = sumSrcAmounts.plus(sumFirstSwapAmounts).toFixed();
              var swapDesc = [tokenIn, tokenOut, Object.keys(src), Object.values(src).map(function (amount) {
                return amount.toFixed();
              }), to, amount, amountOut, numberToHex(32), destTokenFeeData];
              var executorDataForSwapSimpleMode = encodeSimpleModeData({
                firstPools: firstPools,
                firstSwapAmounts: firstSwapAmounts,
                swapSequences: swapSequences,
                deadline: deadline,
                destTokenFeeData: destTokenFeeData
              });
              args = [aggregationExecutorAddress, swapDesc, executorDataForSwapSimpleMode];
              rawExecutorData = {
                firstPools: firstPools,
                firstSwapAmounts: firstSwapAmounts,
                swapSequences: swapSequences,
                deadline: deadline,
                destTokenFeeData: destTokenFeeData
              };
            };

            getSwapNormalModeArgs = function getSwapNormalModeArgs() {
              tradeRoute.forEach(function (sequence) {
                for (var _i2 = 0; _i2 < sequence.length; _i2++) {
                  if (_i2 === 0) {
                    var _firstPool2 = sequence[0];

                    if (etherIn) {
                      if (isEncodeUniswap(_firstPool2)) {
                        _firstPool2.collectAmount = _firstPool2.swapAmount;
                      }
                    } else {
                      var _src$aggregationExecu;

                      if (isEncodeUniswap(_firstPool2)) {
                        _firstPool2.collectAmount = _firstPool2.swapAmount;
                      }

                      src[aggregationExecutorAddress] = new BigNumber(_firstPool2.swapAmount).plus((_src$aggregationExecu = src[aggregationExecutorAddress]) != null ? _src$aggregationExecu : '0');
                    }

                    if (sequence.length === 1 && isEncodeUniswap(_firstPool2)) {
                      _firstPool2.recipient = etherOut || (feeConfig == null ? void 0 : feeConfig.chargeFeeBy) === 'currency_out' ? aggregationExecutorAddress : to;
                    }
                  } else {
                    var A = sequence[_i2 - 1];
                    var B = sequence[_i2];

                    if (isEncodeUniswap(A) && isEncodeUniswap(B)) {
                      A.recipient = B.pool;
                      B.collectAmount = '0';
                    } else if (isEncodeUniswap(B)) {
                      B.collectAmount = '1';
                    } else if (isEncodeUniswap(A)) {
                      A.recipient = aggregationExecutorAddress;
                    }

                    if (_i2 === sequence.length - 1 && isEncodeUniswap(B)) {
                      B.recipient = etherOut || (feeConfig == null ? void 0 : feeConfig.chargeFeeBy) === 'currency_out' ? aggregationExecutorAddress : to;
                    }
                  }
                }
              });
              var swapSequences = encodeSwapExecutor(tradeRoute, chainId != null ? chainId : sdk.ChainId.MAINNET);
              var swapDesc = [tokenIn, tokenOut, Object.keys(src), Object.values(src).map(function (amount) {
                return amount.toFixed();
              }), to, feeConfig && feeConfig.chargeFeeBy === 'currency_in' ? feeConfig.isInBps ? '0x' + new BigNumber(_amountIn).div(new BigNumber(1).minus(new BigNumber(feeConfig.feeAmount).div(10000))).toString(16) : '0x' + new BigNumber(amountIn).plus(feeConfig.feeAmount).toString(16) : amountIn, amountOut, etherIn ? numberToHex(0) : numberToHex(4), destTokenFeeData];
              var executorData = aggregationExecutorContract["interface"].encodeFunctionData('nameDoesntMatter', [[swapSequences, tokenIn, tokenOut, amountOut, to, deadline, destTokenFeeData]]); // Remove method id (slice 10).

              executorData = '0x' + executorData.slice(10);
              args = [aggregationExecutorAddress, swapDesc, executorData];
              rawExecutorData = [swapSequences, tokenIn, tokenOut, amountOut, to, deadline, destTokenFeeData];
            };

            if (isUseSwapSimpleMode) {
              getSwapSimpleModeArgs();
            } else {
              getSwapNormalModeArgs();
            }

            if (etherIn) {
              if (feeConfig && feeConfig.chargeFeeBy === 'currency_in') {
                value = amountInWithFeeIn;
              } else {
                value = amountIn;
              }
            }

            return _context3.abrupt("break", 53);

          case 53:
            return _context3.abrupt("return", {
              swapV2Parameters: {
                methodNames: methodNames,
                args: args,
                value: value
              },
              isUseSwapSimpleMode: isUseSwapSimpleMode,
              rawExecutorData: rawExecutorData,
              tradeRoute: tradeRoute
            });

          case 54:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getData.apply(this, arguments);
}

exports.AGGREGATION_EXECUTOR = AGGREGATION_EXECUTOR;
exports.ETHER_ADDRESS = ETHER_ADDRESS;
exports.NETWORK_URLS = NETWORK_URLS;
exports.ZERO_HEX = ZERO_HEX;
exports.default = getSwapParameters;
exports.getData = getData;
exports.getTradeExactInV2 = getTradeExactInV2;
exports.providers = providers;
exports.routerUri = routerUri;
//# sourceMappingURL=aggregator-sdk.cjs.development.js.map
