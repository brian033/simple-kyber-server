{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MUMBAI = 80001,\n  BSCTESTNET = 97,\n  BSCMAINNET = 56,\n  AVAXTESTNET = 43113,\n  AVAXMAINNET = 43114,\n  FANTOM = 250,\n  CRONOSTESTNET = 338,\n  CRONOS = 25,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421611,\n  BTTC = 199,\n  VELAS = 106,\n  AURORA = 1313161554,\n  OASIS = 42262,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const PRECISION = JSBI.BigInt(1e18)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.MUMBAI]: new Token(\n    ChainId.MUMBAI,\n    '0x19395624C030A11f58e820C3AeFb1f5960d9742a',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.BSCMAINNET]: new Token(\n    ChainId.BSCMAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.AVAXTESTNET]: new Token(\n    ChainId.AVAXTESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.AVAXMAINNET]: new Token(\n    ChainId.AVAXMAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped Fantom',\n  ),\n  [ChainId.CRONOSTESTNET]: new Token(\n    ChainId.CRONOSTESTNET,\n    '0x1A46dCaC1d91F1731574BEfAEDaC4E0392726e35',\n    18,\n    'WCRO',\n    'Wrapped CRO',\n  ),\n  [ChainId.CRONOS]: new Token(ChainId.CRONOS, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'WCRO', 'Wrapped CRO'),\n\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.BTTC]: new Token(\n    ChainId.BTTC,\n    '0x8D193c6efa90BCFf940A98785d1Ce9D093d3DC8A',\n    18,\n    'WBTT',\n    'Wrapped BitTorrent',\n  ),\n  [ChainId.VELAS]: new Token(ChainId.VELAS, '0xc579D1f3CF86749E05CD06f7ADe17856c2CE3126', 18, 'WVLX', 'Wrapped VLX'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.OASIS]: new Token(ChainId.OASIS, '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733', 18, 'WROSE', 'Wrapped ROSE'),\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0,\n  [Rounding.ROUND_HALF_UP]: 1,\n  [Rounding.ROUND_UP]: 3,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator),\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(pair.priceOf(route.path[i]))\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public static fromReserves(inputReserves: TokenAmount[], outputReserves: TokenAmount[]) {\n    invariant(inputReserves.length === outputReserves.length, 'RESERVE')\n    const prices: Price[] = []\n    for (const [i, inputReserve] of inputReserves.entries()) {\n      prices.push(new Price(inputReserve.currency, outputReserves[i].currency, inputReserve.raw, outputReserves[i].raw))\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)),\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { TokenAmount, Price } from './fractions'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, MINIMUM_LIQUIDITY, ZERO, ONE, ChainId, PRECISION } from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\n//TODO: rename to Pool object\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly virtualTokenAmounts: [TokenAmount, TokenAmount]\n  public readonly fee: JSBI\n  public readonly address: string\n  public readonly amp: JSBI\n\n  public constructor(\n    address: string,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    virtualTokenAmountA: TokenAmount,\n    virtualTokenAmountB: TokenAmount,\n    fee: JSBI,\n    amp: JSBI,\n  ) {\n    this.address = address\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const virtualTokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [virtualTokenAmountA, virtualTokenAmountB]\n      : [virtualTokenAmountB, virtualTokenAmountA]\n\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, address, 18, 'DMM-LP', 'DMM LP')\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.virtualTokenAmounts = virtualTokenAmounts as [TokenAmount, TokenAmount]\n    this.fee = fee\n    this.amp = amp\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.virtualTokenAmounts[0].raw, this.virtualTokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.virtualTokenAmounts[1].raw, this.virtualTokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  public priceOfReal(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0)\n      ? new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n      : new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get virtualReserve0(): TokenAmount {\n    return this.virtualTokenAmounts[0]\n  }\n\n  public get virtualReserve1(): TokenAmount {\n    return this.virtualTokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public virtualReserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.virtualReserve0 : this.virtualReserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputToken = inputAmount.token.equals(this.token0) ? this.token1 : this.token0\n    const inputReserve = this.virtualReserveOf(inputAmount.token)\n    const outputReserve = this.virtualReserveOf(outputToken)\n\n    const inputAmountWithFee = JSBI.divide(\n      JSBI.multiply(inputAmount.raw, JSBI.subtract(PRECISION, this.fee)),\n      PRECISION,\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(inputReserve.raw, inputAmountWithFee)\n    const outputAmount = new TokenAmount(outputToken, JSBI.divide(numerator, denominator))\n\n    if (JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputToken).raw)) {\n      throw new InsufficientReservesError()\n    }\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const inputToken = outputAmount.token.equals(this.token0) ? this.token1 : this.token0\n\n    const outputReserve = this.virtualReserveOf(outputAmount.token)\n    const inputReserve = this.virtualReserveOf(inputToken)\n    ///\n    let numerator = JSBI.multiply(inputReserve.raw, outputAmount.raw)\n    let denominator = JSBI.subtract(outputReserve.raw, outputAmount.raw)\n    const inputAmountWithFee = JSBI.add(JSBI.divide(numerator, denominator), ONE)\n\n    numerator = JSBI.multiply(inputAmountWithFee, PRECISION)\n    denominator = JSBI.subtract(PRECISION, this.fee)\n\n    const inputAmount = new TokenAmount(\n      inputToken,\n      JSBI.divide(JSBI.subtract(JSBI.add(numerator, denominator), ONE), denominator),\n    )\n    return [inputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeBps: JSBI = ZERO,\n    kLast?: BigintIsh,\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (JSBI.equal(feeBps, ZERO)) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.virtualReserve0.raw, this.virtualReserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast)), feeBps)\n          const denominator = JSBI.multiply(JSBI.add(rootK, rootKLast), JSBI.BigInt(5000))\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw),\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS',\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT',\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT',\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact(\n  midPrice: Price,\n  inputAmount: CurrencyAmount,\n  outputAmount: CurrencyAmount,\n): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextInputReserves: TokenAmount[] = new Array(route.pairs.length)\n    const nextOutputReserves: TokenAmount[] = new Array(route.pairs.length)\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextInputReserves[i] = nextPair[0]\n        nextOutputReserves[i] = nextPair[1]\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextInputReserves[i - 1] = nextPair[0]\n        nextOutputReserves[i - 1] = nextPair[1]\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw,\n    )\n    this.nextMidPrice = Price.fromReserves(nextInputReserves, nextOutputReserves)\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[][],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountIn.token) && !pair[0].token1.equals(amountIn.token)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountOut: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        const pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountOut: TokenAmount\n        try {\n          ;[amountOut] = pool.getOutputAmount(amountIn)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountOut === undefined) {\n          bestAmountOut = amountOut\n          bestPool = pool\n        } else {\n          if (amountOut.greaterThan(bestAmountOut)) {\n            bestAmountOut = amountOut\n            bestPool = pool\n          }\n        }\n      }\n\n      // not found any pool has rate\n      if (bestAmountOut === undefined || bestPool === undefined) {\n        continue\n      }\n\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (bestAmountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, bestPool], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT,\n          ),\n          maxNumResults,\n          tradeComparator,\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          bestAmountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, bestPool],\n          originalAmountIn,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[][],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountOut.token) && !pair[0].token1.equals(amountOut.token)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountIn: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        let pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountIn: TokenAmount\n        try {\n          ;[amountIn] = pool.getInputAmount(amountOut)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountIn === undefined) {\n          bestAmountIn = amountIn\n          bestPool = pool\n        } else {\n          if (amountIn.lessThan(bestAmountIn)) {\n            bestAmountIn = amountIn\n            bestPool = pool\n          }\n        }\n      }\n\n      // not found any pool has rate\n      if (bestAmountIn === undefined || bestPool === undefined) {\n        continue\n      }\n\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (bestAmountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([bestPool, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n          ),\n          maxNumResults,\n          tradeComparator,\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          bestAmountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [bestPool, ...currentPairs],\n          originalAmountOut,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the DmmExchange Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the DmmExchange Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: Array<string | Array<string | string[]>>\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the DmmExchange Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const pairsPath: string[] = trade.route.pairs.map(pair => pair.address)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport DMMFactory from './abis/DMMFactory.json'\nimport DMMPool from './abis/DMMPool.json'\n\nimport { ChainId } from './constants'\nimport { parseBigintIsh } from './utils'\nimport { Token } from './entities/token'\nimport { JSBI } from '.'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9, // DGD\n  },\n}\n\nlet PAIR_ADDRESS_CACHE: { [chainId: number]: { [token0Address: string]: { [token1Address: string]: string[] } } } = {}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string,\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals,\n              },\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about pairs and constructs pairs array from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param factoryAddress address of dmmFactory\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n  ): Promise<Pair[]> {\n    const addresses = await Fetcher.fetchPairAddresses(tokenA, tokenB, factoryAddress, provider)\n    return Promise.all(\n      addresses.map(async address => {\n        let poolContract = new Contract(address, DMMPool.abi, provider)\n        const [reserve0, reserve1, vReserve0, vReserve1, feeInPrecision] = await poolContract.getTradeInfo()\n        const ampBps = await poolContract.ampBps()\n        const balances = tokenA.sortsBefore(tokenB)\n          ? [reserve0, reserve1, vReserve0, vReserve1]\n          : [reserve1, reserve0, vReserve1, vReserve0]\n        return new Pair(\n          address,\n          new TokenAmount(tokenA, balances[0]),\n          new TokenAmount(tokenB, balances[1]),\n          new TokenAmount(tokenA, balances[2]),\n          new TokenAmount(tokenB, balances[3]),\n          parseBigintIsh(feeInPrecision),\n          JSBI.BigInt(ampBps),\n        )\n      }),\n    )\n  }\n\n  /**\n   * Fetches information about pair addresses from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairAddresses(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n  ): Promise<string[]> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    if (typeof PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[1].address]?.[tokenB.address] == 'undefined') {\n      const factory = await new Contract(factoryAddress, DMMFactory.abi, provider)\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [chainId]: {\n          ...PAIR_ADDRESS_CACHE?.[chainId],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[0].address],\n            [tokens[1].address]: await factory.getPools(tokens[0].address, tokens[1].address),\n          },\n        },\n      }\n    }\n    return PAIR_ADDRESS_CACHE[chainId][tokens[0].address][tokens[1].address]\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","TEN","_100","PRECISION","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","MATIC","MUMBAI","BSCTESTNET","BSCMAINNET","AVAXTESTNET","AVAXMAINNET","FANTOM","CRONOSTESTNET","CRONOS","ARBITRUM","ARBITRUM_TESTNET","BTTC","VELAS","AURORA","OASIS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","priceOf","path","slice","reduce","accumulator","currentValue","fromReserves","inputReserves","outputReserves","i","inputReserve","fraction","quote","currencyAmount","_Fraction","adjusted","Pair","tokenAmountA","tokenAmountB","virtualTokenAmountA","virtualTokenAmountB","fee","amp","tokenAmounts","virtualTokenAmounts","liquidityToken","involvesToken","token0","token1","token0Price","token1Price","priceOfReal","reserveOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","getOutputAmount","inputAmount","outputToken","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","inputToken","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeBps","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","pair","currentInput","midPrice","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextInputReserves","nextOutputReserves","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","bestPool","bestAmountOut","j","pool","isInsufficientInputAmountError","isInsufficientReservesError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","bestAmountIn","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","pairsPath","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","PAIR_ADDRESS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","tokenA","tokenB","factoryAddress","fetchPairAddresses","addresses","Promise","all","poolContract","DMMPool","abi","getTradeInfo","vReserve0","vReserve1","feeInPrecision","ampBps","balances","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$_","_PAIR_ADDRESS_CACHE$_2","DMMFactory","factory","getPools","_PAIR_ADDRESS_CACHE2","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$"],"mappings":"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"}