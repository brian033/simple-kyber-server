{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MUMBAI = 80001,\n  BSCTESTNET = 97,\n  BSCMAINNET = 56,\n  AVAXTESTNET = 43113,\n  AVAXMAINNET = 43114,\n  FANTOM = 250,\n  CRONOSTESTNET = 338,\n  CRONOS = 25,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421611,\n  BTTC = 199,\n  VELAS = 106,\n  AURORA = 1313161554,\n  OASIS = 42262,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const PRECISION = JSBI.BigInt(1e18)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.MUMBAI]: new Token(\n    ChainId.MUMBAI,\n    '0x19395624C030A11f58e820C3AeFb1f5960d9742a',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.BSCMAINNET]: new Token(\n    ChainId.BSCMAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.AVAXTESTNET]: new Token(\n    ChainId.AVAXTESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.AVAXMAINNET]: new Token(\n    ChainId.AVAXMAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped Fantom',\n  ),\n  [ChainId.CRONOSTESTNET]: new Token(\n    ChainId.CRONOSTESTNET,\n    '0x1A46dCaC1d91F1731574BEfAEDaC4E0392726e35',\n    18,\n    'WCRO',\n    'Wrapped CRO',\n  ),\n  [ChainId.CRONOS]: new Token(ChainId.CRONOS, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'WCRO', 'Wrapped CRO'),\n\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.BTTC]: new Token(\n    ChainId.BTTC,\n    '0x8D193c6efa90BCFf940A98785d1Ce9D093d3DC8A',\n    18,\n    'WBTT',\n    'Wrapped BitTorrent',\n  ),\n  [ChainId.VELAS]: new Token(ChainId.VELAS, '0xc579D1f3CF86749E05CD06f7ADe17856c2CE3126', 18, 'WVLX', 'Wrapped VLX'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.OASIS]: new Token(ChainId.OASIS, '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733', 18, 'WROSE', 'Wrapped ROSE'),\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0,\n  [Rounding.ROUND_HALF_UP]: 1,\n  [Rounding.ROUND_UP]: 3,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator),\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(pair.priceOf(route.path[i]))\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public static fromReserves(inputReserves: TokenAmount[], outputReserves: TokenAmount[]) {\n    invariant(inputReserves.length === outputReserves.length, 'RESERVE')\n    const prices: Price[] = []\n    for (const [i, inputReserve] of inputReserves.entries()) {\n      prices.push(new Price(inputReserve.currency, outputReserves[i].currency, inputReserve.raw, outputReserves[i].raw))\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)),\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { TokenAmount, Price } from './fractions'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, MINIMUM_LIQUIDITY, ZERO, ONE, ChainId, PRECISION } from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\n//TODO: rename to Pool object\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly virtualTokenAmounts: [TokenAmount, TokenAmount]\n  public readonly fee: JSBI\n  public readonly address: string\n  public readonly amp: JSBI\n\n  public constructor(\n    address: string,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    virtualTokenAmountA: TokenAmount,\n    virtualTokenAmountB: TokenAmount,\n    fee: JSBI,\n    amp: JSBI,\n  ) {\n    this.address = address\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const virtualTokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [virtualTokenAmountA, virtualTokenAmountB]\n      : [virtualTokenAmountB, virtualTokenAmountA]\n\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, address, 18, 'DMM-LP', 'DMM LP')\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.virtualTokenAmounts = virtualTokenAmounts as [TokenAmount, TokenAmount]\n    this.fee = fee\n    this.amp = amp\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.virtualTokenAmounts[0].raw, this.virtualTokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.virtualTokenAmounts[1].raw, this.virtualTokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  public priceOfReal(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0)\n      ? new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n      : new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get virtualReserve0(): TokenAmount {\n    return this.virtualTokenAmounts[0]\n  }\n\n  public get virtualReserve1(): TokenAmount {\n    return this.virtualTokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public virtualReserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.virtualReserve0 : this.virtualReserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputToken = inputAmount.token.equals(this.token0) ? this.token1 : this.token0\n    const inputReserve = this.virtualReserveOf(inputAmount.token)\n    const outputReserve = this.virtualReserveOf(outputToken)\n\n    const inputAmountWithFee = JSBI.divide(\n      JSBI.multiply(inputAmount.raw, JSBI.subtract(PRECISION, this.fee)),\n      PRECISION,\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(inputReserve.raw, inputAmountWithFee)\n    const outputAmount = new TokenAmount(outputToken, JSBI.divide(numerator, denominator))\n\n    if (JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputToken).raw)) {\n      throw new InsufficientReservesError()\n    }\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const inputToken = outputAmount.token.equals(this.token0) ? this.token1 : this.token0\n\n    const outputReserve = this.virtualReserveOf(outputAmount.token)\n    const inputReserve = this.virtualReserveOf(inputToken)\n    ///\n    let numerator = JSBI.multiply(inputReserve.raw, outputAmount.raw)\n    let denominator = JSBI.subtract(outputReserve.raw, outputAmount.raw)\n    const inputAmountWithFee = JSBI.add(JSBI.divide(numerator, denominator), ONE)\n\n    numerator = JSBI.multiply(inputAmountWithFee, PRECISION)\n    denominator = JSBI.subtract(PRECISION, this.fee)\n\n    const inputAmount = new TokenAmount(\n      inputToken,\n      JSBI.divide(JSBI.subtract(JSBI.add(numerator, denominator), ONE), denominator),\n    )\n    return [inputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeBps: JSBI = ZERO,\n    kLast?: BigintIsh,\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (JSBI.equal(feeBps, ZERO)) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.virtualReserve0.raw, this.virtualReserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast)), feeBps)\n          const denominator = JSBI.multiply(JSBI.add(rootK, rootKLast), JSBI.BigInt(5000))\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw),\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS',\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT',\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT',\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact(\n  midPrice: Price,\n  inputAmount: CurrencyAmount,\n  outputAmount: CurrencyAmount,\n): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextInputReserves: TokenAmount[] = new Array(route.pairs.length)\n    const nextOutputReserves: TokenAmount[] = new Array(route.pairs.length)\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextInputReserves[i] = nextPair[0]\n        nextOutputReserves[i] = nextPair[1]\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextInputReserves[i - 1] = nextPair[0]\n        nextOutputReserves[i - 1] = nextPair[1]\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw,\n    )\n    this.nextMidPrice = Price.fromReserves(nextInputReserves, nextOutputReserves)\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[][],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountIn.token) && !pair[0].token1.equals(amountIn.token)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountOut: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        const pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountOut: TokenAmount\n        try {\n          ;[amountOut] = pool.getOutputAmount(amountIn)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountOut === undefined) {\n          bestAmountOut = amountOut\n          bestPool = pool\n        } else {\n          if (amountOut.greaterThan(bestAmountOut)) {\n            bestAmountOut = amountOut\n            bestPool = pool\n          }\n        }\n      }\n\n      // not found any pool has rate\n      if (bestAmountOut === undefined || bestPool === undefined) {\n        continue\n      }\n\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (bestAmountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, bestPool], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT,\n          ),\n          maxNumResults,\n          tradeComparator,\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          bestAmountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, bestPool],\n          originalAmountIn,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[][],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountOut.token) && !pair[0].token1.equals(amountOut.token)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountIn: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        let pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountIn: TokenAmount\n        try {\n          ;[amountIn] = pool.getInputAmount(amountOut)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountIn === undefined) {\n          bestAmountIn = amountIn\n          bestPool = pool\n        } else {\n          if (amountIn.lessThan(bestAmountIn)) {\n            bestAmountIn = amountIn\n            bestPool = pool\n          }\n        }\n      }\n\n      // not found any pool has rate\n      if (bestAmountIn === undefined || bestPool === undefined) {\n        continue\n      }\n\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (bestAmountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([bestPool, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n          ),\n          maxNumResults,\n          tradeComparator,\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          bestAmountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [bestPool, ...currentPairs],\n          originalAmountOut,\n          bestTrades,\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the DmmExchange Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the DmmExchange Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: Array<string | Array<string | string[]>>\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the DmmExchange Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const pairsPath: string[] = trade.route.pairs.map(pair => pair.address)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport DMMFactory from './abis/DMMFactory.json'\nimport DMMPool from './abis/DMMPool.json'\n\nimport { ChainId } from './constants'\nimport { parseBigintIsh } from './utils'\nimport { Token } from './entities/token'\nimport { JSBI } from '.'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9, // DGD\n  },\n}\n\nlet PAIR_ADDRESS_CACHE: { [chainId: number]: { [token0Address: string]: { [token1Address: string]: string[] } } } = {}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string,\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals,\n              },\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about pairs and constructs pairs array from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param factoryAddress address of dmmFactory\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n  ): Promise<Pair[]> {\n    const addresses = await Fetcher.fetchPairAddresses(tokenA, tokenB, factoryAddress, provider)\n    return Promise.all(\n      addresses.map(async address => {\n        let poolContract = new Contract(address, DMMPool.abi, provider)\n        const [reserve0, reserve1, vReserve0, vReserve1, feeInPrecision] = await poolContract.getTradeInfo()\n        const ampBps = await poolContract.ampBps()\n        const balances = tokenA.sortsBefore(tokenB)\n          ? [reserve0, reserve1, vReserve0, vReserve1]\n          : [reserve1, reserve0, vReserve1, vReserve0]\n        return new Pair(\n          address,\n          new TokenAmount(tokenA, balances[0]),\n          new TokenAmount(tokenB, balances[1]),\n          new TokenAmount(tokenA, balances[2]),\n          new TokenAmount(tokenB, balances[3]),\n          parseBigintIsh(feeInPrecision),\n          JSBI.BigInt(ampBps),\n        )\n      }),\n    )\n  }\n\n  /**\n   * Fetches information about pair addresses from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairAddresses(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n  ): Promise<string[]> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    if (typeof PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[1].address]?.[tokenB.address] == 'undefined') {\n      const factory = await new Contract(factoryAddress, DMMFactory.abi, provider)\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [chainId]: {\n          ...PAIR_ADDRESS_CACHE?.[chainId],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[0].address],\n            [tokens[1].address]: await factory.getPools(tokens[0].address, tokens[1].address),\n          },\n        },\n      }\n    }\n    return PAIR_ADDRESS_CACHE[chainId][tokens[0].address][tokens[1].address]\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","TEN","_100","PRECISION","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","MATIC","MUMBAI","BSCTESTNET","BSCMAINNET","AVAXTESTNET","AVAXMAINNET","FANTOM","CRONOSTESTNET","CRONOS","ARBITRUM","ARBITRUM_TESTNET","BTTC","VELAS","AURORA","OASIS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","priceOf","path","slice","reduce","accumulator","currentValue","fromReserves","inputReserves","outputReserves","inputReserve","fraction","quote","currencyAmount","adjusted","Pair","tokenAmountA","tokenAmountB","virtualTokenAmountA","virtualTokenAmountB","fee","amp","tokenAmounts","virtualTokenAmounts","liquidityToken","involvesToken","token0","token1","token0Price","token1Price","priceOfReal","reserveOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","getOutputAmount","inputAmount","outputToken","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","inputToken","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeBps","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextInputReserves","nextOutputReserves","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","bestPool","bestAmountOut","j","pool","isInsufficientInputAmountError","isInsufficientReservesError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","bestAmountIn","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","pairsPath","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","PAIR_ADDRESS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","tokenA","tokenB","factoryAddress","fetchPairAddresses","addresses","Promise","all","poolContract","DMMPool","abi","getTradeInfo","vReserve0","vReserve1","feeInPrecision","ampBps","balances","tokens","DMMFactory","factory","getPools"],"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"}